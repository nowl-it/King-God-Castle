name: Auto-Update Documentation

on:
  release:
    types: [published]

jobs:
  update-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract release version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Update README with latest version
        run: |
          # Update installation command in README if it exists
          if grep -q "curl.*install.sh" README.md; then
            # Update the installation command to use the latest release
            sed -i "s|curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/[^/]*/install.sh|curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/${{ steps.version.outputs.tag }}/install.sh|g" README.md
          fi

          # Update version badges if they exist
          if grep -q "version-.*-blue" README.md; then
            sed -i "s/version-[^-]*-blue/version-${{ steps.version.outputs.version }}-blue/g" README.md
          fi

          # Add version badge if it doesn't exist
          if ! grep -q "version-.*-blue" README.md && grep -q "^# KGC" README.md; then
            sed -i '/^# KGC/a\\n![Version](https://img.shields.io/badge/version-${{ steps.version.outputs.version }}-blue)' README.md
          fi

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.changes.outputs.changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add README.md
          git commit -m "docs: update version references to ${{ steps.version.outputs.tag }}"
          git push origin main

      - name: Create installation snippet
        run: |
          cat > INSTALL_SNIPPET.md << 'EOF'
          ## Quick Installation

          ```bash
          # Download and run the installer
          curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/${{ steps.version.outputs.tag }}/install.sh | bash

          # Or download manually
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.tag }}/kgc-toolkit-${{ steps.version.outputs.version }}.tar.gz
          ```

          ## Release Information

          - **Version**: ${{ steps.version.outputs.version }}
          - **Release Date**: $(date -u +"%Y-%m-%d")
          - **Download**: [GitHub Releases](https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }})
          EOF

          echo "ðŸ“‹ Installation snippet created for version ${{ steps.version.outputs.version }}"
