name: Validate Release Branch

on:
  push:
    branches:
      - "v*"
  pull_request:
    branches:
      - "v*"

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate branch naming
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}

          # For pull requests, use the head ref
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BRANCH_NAME="${{ github.head_ref }}"
          fi

          echo "Validating branch: $BRANCH_NAME"

          # Check if branch follows v* pattern
          if [[ ! $BRANCH_NAME =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ Branch name must follow semantic versioning: v1.0.0, v2.1.3, v1.0.0-beta.1, etc."
            echo "Current branch: $BRANCH_NAME"
            exit 1
          fi

          VERSION=${BRANCH_NAME#v}
          echo "✅ Valid version format: $VERSION"
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: Validate install.sh syntax
        run: |
          echo "🔍 Validating install.sh syntax..."
          bash -n install.sh
          echo "✅ install.sh syntax is valid"

      - name: Check for required files
        run: |
          echo "🔍 Checking required files..."

          required_files=("install.sh" "README.md" "LICENSE")

          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Required file missing: $file"
              exit 1
            else
              echo "✅ Found: $file"
            fi
          done

      - name: Validate README.md
        run: |
          echo "🔍 Validating README.md..."

          # Check if README contains version references that need updating
          if grep -q "version" README.md; then
            echo "ℹ️ README.md contains version references - consider updating for release"
          fi

          # Check for basic structure
          required_sections=("# KGC" "## About" "## Installation")

          for section in "${required_sections[@]}"; do
            if ! grep -q "$section" README.md; then
              echo "⚠️ Missing recommended section in README.md: $section"
            else
              echo "✅ Found section: $section"
            fi
          done

      - name: Test install script
        run: |
          echo "🧪 Testing install script (dry run)..."

          # Create a mock test environment
          mkdir -p test_env
          cd test_env

          # Copy install script
          cp ../install.sh .

          # Test script help/usage
          bash install.sh --help || true
          bash install.sh -h || true

          echo "✅ Install script basic tests passed"

      - name: Check for security issues
        run: |
          echo "🔒 Checking for potential security issues..."

          # Check install.sh for potentially dangerous patterns
          dangerous_patterns=(
            "rm -rf \/"
            "sudo rm"
            "chmod 777"
            "curl.*|.*sh"
            "wget.*|.*sh"
          )

          for pattern in "${dangerous_patterns[@]}"; do
            if grep -E "$pattern" install.sh; then
              echo "⚠️ Potentially dangerous pattern found: $pattern"
              echo "Please review for security implications"
            fi
          done

          echo "✅ Security check completed"

      - name: Generate release notes preview
        if: github.event_name == 'push'
        run: |
          echo "📝 Release notes preview for version $VERSION:"
          echo "========================================"

          # Get commits since last tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LATEST_TAG" ]; then
            echo "This will be the first release!"
            git log --pretty=format:"- %s (%h)" --reverse | head -10
          else
            echo "Changes since $LATEST_TAG:"
            git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse
          fi

          echo ""
          echo "========================================"
          echo "🚀 Ready for release creation!"
